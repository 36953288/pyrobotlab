from org.myrobotlab.service import Arduino
from org.myrobotlab.service import Servo
from org.myrobotlab.service import Joystick
from org.myrobotlab.service import Runtime
from time import sleep
import time
import math

#---------------------------------Create Services----------------------
arduino = Runtime.createAndStart("arduino","Arduino")
joystick = Runtime.createAndStart("joystick","Joystick")
wrist  = Runtime.createAndStart("wrist","Servo")
grip  = Runtime.createAndStart("grip","Servo")
elbow  = Runtime.createAndStart("elbow","Servo")
shoulder  = Runtime.createAndStart("shoulder","Servo")
headturn = Runtime.createAndStart("headturn","Servo")
headtilt = Runtime.createAndStart("headtilt","Servo")
motorleft = Runtime.start("motorleft","Motor")
motorright = Runtime.start("motorright","Motor")



#----------------------Connect Peripherals-----------------------------------
arduino.connect("/dev/ttyACM0");
joystick.setController(0); #PC only - Pi needs new

#------------------------DEFINE STATIC VALUES-------------------------------


arduino.motorAttach("motorleft", 5, 4) 
arduino.motorAttach("motorright", 6, 7)

# attach servos to Arduino
#wrist.attach(arduino.getName(), 8)
#grip.attach(arduino.getName(), 11)
elbow.attach(arduino.getName(), 3)
shoulder.attach(arduino.getName(), 2)
headturn.attach(arduino.getName(), 12)
headtilt.attach(arduino.getName(), 13)



#------------------Define Global Variables----------------------------------------


#-----------------------------Primary Loop---------------------------------

#Detach for safety
wrist.detach()
grip.detach()
#elbow.detach()
#shoulder.detach()
#headturn.detach()
#headtilt.detach()

joystick.startPolling();

sleep (25)
joystick.addListener("publishX", "python", "StickXListener")
joystick.addListener("publishY", "python", "StickYListener")
joystick.addListener("publishRX", "python", "StickRXListener")
joystick.addListener("publishRY", "python", "StickRYListener")

wrist.setMinMax(20 , 160)
grip.setMinMax(20 , 160)
elbow.setMinMax(20 , 160)
shoulder.setMinMax(20 , 160)
headturn.setMinMax(20 , 160)
headtilt.setMinMax(20 , 160)

def StickRYListener(value):
  print "Stick RY :" + str(value) + " Current pos: " + str(headtilt.pos)
  absValue = math.fabs(value)
  if (absValue < 0.175):
    print "Stop sweep"
    headtilt.stop()
    return
  absValue = absValue-0.01
  print "Set Speed " + str(absValue)
  headtilt.setSpeed(absValue)
  delay = int((1-absValue) * 200)
  if (value > 0.0):
    if (headtilt.isSweeping()):
      headtilt.setSweeperDelay(delay)
    else:    
      headtilt.sweep(headtilt.pos, headtilt.max, delay, 1, True)
  else:
    if (headtilt.isSweeping()):
      headtilt.setSweeperDelay(delay)
    else:
      headtilt.sweep(headtilt.min, headtilt.pos, delay, -1, True)

def StickRXListener(value):
  print "Stick RX :" + str(value) + " Current pos: " + str(headturn.pos)
  absValue = math.fabs(value)
  if (absValue < 0.175):
    print "Stop sweep"
    headturn.stop()
    return
  absValue = absValue-0.01
  print "Set Speed " + str(absValue)
  headturn.setSpeed(absValue)
  delay = int((1-absValue) * 200)
  if (value > 0.0):
    if (headturn.isSweeping()):
      headturn.setSweeperDelay(delay)
    else:    
      headturn.sweep(headturn.pos, headturn.max, delay, 1, True)
  else:
    if (headturn.isSweeping()):
      headturn.setSweeperDelay(delay)
    else:
      headturn.sweep(headturn.min, headturn.pos, delay, -1, True)
      
def StickXListener(value):
  print "Stick X :" + str(value) + " Current pos: " + str(elbow.pos)
  absValue = math.fabs(value)
  if (absValue < 0.175):
    print "Stop sweep"
    elbow.stop()
    return
  absValue = absValue-0.01
  print "Set Speed " + str(absValue)
  elbow.setSpeed(absValue)
  delay = int((1-absValue) * 200)
  if (value > 0.0):
    if (elbow.isSweeping()):
      elbow.setSweeperDelay(delay)
    else:    
      elbow.sweep(elbow.pos, elbow.max, delay, 1, True)
  else:
    if (elbow.isSweeping()):
      elbow.setSweeperDelay(delay)
    else:
      elbow.sweep(elbow.min, elbow.pos, delay, -1, True)

def StickYListener(value):
  print "Stick Y :" + str(value) + " Current pos: " + str(shoulder.pos)
  absValue = math.fabs(value)
  if (absValue < 0.175):
    print "Stop sweep"
    shoulder.stop()
    return
  absValue = absValue-0.01
  print "Set Speed " + str(absValue)
  shoulder.setSpeed(absValue)
  delay = int((1-absValue) * 200)
  if (value > 0.0):
    if (shoulder.isSweeping()):
      shoulder.setSweeperDelay(delay)
    else:    
      shoulder.sweep(shoulder.pos, shoulder.max, delay, 1, True)
  else:
    if (shoulder.isSweeping()):
      shoulder.setSweeperDelay(delay)
    else:
      shoulder.sweep(shoulder.min, shoulder.pos, delay, -1, True)
