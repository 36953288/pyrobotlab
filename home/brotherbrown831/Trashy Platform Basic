from org.myrobotlab.service import Arduino
from org.myrobotlab.service import Joystick
from org.myrobotlab.service import Runtime
from org.myrobotlab.service import Motor
from time import sleep
import time
import math

#---------------------------------Create Services----------------------
arduino = Runtime.createAndStart("arduino","Arduino")
joystick = Runtime.createAndStart("joystick","Joystick")
headturn = Runtime.createAndStart("headturn","Servo")
headtilt = Runtime.createAndStart("headtilt","Servo")
motorleft = Runtime.start("motorleft","Motor")
motorright = Runtime.start("motorright","Motor")

#----------------------Connect Peripherals-----------------------------------
arduino.connect("/dev/ttyACM0");
joystick.setController(0); #PC only - Pi needs new

#------------------------DEFINE STATIC VALUES-------------------------------

headturn_INIT = 90
headtilt_INIT = 90

headturn_MIN = 20
SERVO6_MIN   = 20

headturn_MAX = 160
headtilt_MAX = 160

STICK_CENTER = 0 #Value from controller when sticks are centered (127 for PS3 controller, 0 for xbox controller)
DEADZONE     = 07500  #Deadzone to prevent unwanted movement. Defined as 7500 for Xbox360 Controller

arduino.motorAttach("motorleft", 5, 4) 
arduino.motorAttach("motorright", 6, 7)

#------------------Define Global Variables----------------------------------------

s5 = headturn_INIT
s6 = headtilt_INIT

# attach servos to Arduino

headturn.attach(arduino.getName(12), XXXX)
headtilt.attach(arduino.getName(), 13)

#-----------------------------Primary Loop---------------------------------

#Detach for safety
headturn.detach()
headtilt.detach()

joystick.startPolling(); 

#joystick.addListener("publishX", "python", "StickXListener")
#joystick.addListener("publishY", "python", "StickYListener")

#joystick.addListener("publishRX", "python", "StickRXListener")
joystick.addListener("publishRY", "python", "StickRYListener")

#-----------------------------------Platform Movement----------------------------

def StickRYListener(value):
  print "Stick RY :" + str(value)
  global RYLeft
  global RYRight
  absValue = math.fabs(value)
  if (absValue < 0.175):
    RYLeft = 0
	RYRight = 0
	return
  RYLeft = 255*(value)
  RYRight = 255*(value)

def StickRXListener(value):
  print "Stick RX :" + str(value)
  global RXLeft
  global RXRight
  absValue = math.fabs(value)
  if (absValue < 0.175):
    RYLeft = 0
	RYRight = 0
	return
  YLeft = 255*(value)
  YRight = 255*(value)  

TotalLeft = RYLeft + RXLeft
  if (TotalLeft > 250):
     TotalLeft = 250
  elif (TotalLeft < -250):
     TotalLeft = -250
	 
TotalRight = RYRight + RXRight 
  if (TotalRight > 250):
     TotalRight = 250
  elif (TotalLeft < -250):
     TotalLeft = -250
	 
motorleft.move(TotalLeft)
motorright.move(TotalRight)
  
#-----------------------------------Headtilt----------------------------

headtilt.setMinMax(40 , 120)
headtilt.moveTo(80)

def StickYListener(value):
  print "Stick Y :" + str(value) + " Current pos: " + str(headtilt.pos)
  absValue = math.fabs(value)
  if (absValue < 0.175):
    print "Stop sweep"
    headtilt.stop()
    return
  absValue = absValue-0.01
  print "Set Speed " + str(absValue)
  headtilt.setSpeed(absValue)
  delay = int((1-absValue) * 200)
  if (value > 0.0):
    if (headtilt.isSweeping()):
      headtilt.setSweeperDelay(delay)
    else:    
      headtilt.sweep(headtilt.pos, headtilt.max, delay, 1, True)
  else:
    if (headtilt.isSweeping()):
      headtilt.setSweeperDelay(delay)
    else:
      headtilt.sweep(headtilt.min, headtilt.pos, delay, -1, True)
